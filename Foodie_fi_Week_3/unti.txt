**Schema (PostgreSQL v13)**

    --CREATE SCHEMA dannys_diner;
    --SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---

**Query #1**

    SELECT
       customer_id,
       SUM(price) AS amount
    FROM sales
    INNER JOIN menu
    USING (product_id)
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | amount |
| ----------- | ------ |
| A           | 76     |
| B           | 74     |
| C           | 36     |

---
**Query #2**

    SELECT customer_id, COUNT(DISTINCT(order_date)) AS no_of_visits
    From sales
    GROUP BY customer_id
    ORDER BY no_of_visits DESC;

| customer_id | no_of_visits |
| ----------- | ------------ |
| B           | 6            |
| A           | 4            |
| C           | 2            |

---
**Query #3**

    WITH first_purchase AS 
    (
        SELECT 
            *,
            ROW_NUMBER () OVER (PARTITION BY customer_id ORDER BY order_date ) AS purchase_number            
        FROM sales
    )
    SELECT 
        customer_id, product_name
    FROM first_purchase 
    INNER JOIN menu
    USING(product_id)
    WHERE purchase_number = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | sushi        |
| B           | curry        |
| C           | ramen        |

---
**Query #4**

    SELECT product_name, COUNT(product_id) AS product
    FROM menu 
    JOIN sales
    USING(product_id)
    GROUP BY product_name
    ORDER BY COUNT(product_id) DESC
    LIMIT 1;

| product_name | product |
| ------------ | ------- |
| ramen        | 8       |

---
**Query #5**

    WITH purchase_counts AS 
    (
      SELECT s.customer_id, m.product_name, COUNT(*) AS purchase_quantity,
             DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY COUNT(*) DESC) AS rank
      FROM sales s
      INNER JOIN menu m 
      USING(product_id)
      GROUP BY s.customer_id, m.product_name
    )
    SELECT customer_id, product_name, purchase_quantity
    FROM purchase_counts
    WHERE rank = 1;

| customer_id | product_name | purchase_quantity |
| ----------- | ------------ | ----------------- |
| A           | ramen        | 3                 |
| B           | ramen        | 2                 |
| B           | curry        | 2                 |
| B           | sushi        | 2                 |
| C           | ramen        | 3                 |

---
**Query #6**

    WITH member_purchase AS 
    (
    SELECT *,
    ROW_NUMBER () OVER(PARTITION BY customer_id ORDER BY order_date) AS rank
    FROM sales
    INNER JOIN menu USING(product_id)
    INNER JOIN members USING(customer_id)
      WHERE order_date >= join_date
      ORDER BY customer_id, order_date
      )
     SELECT customer_id, product_name
     FROM member_purchase
     WHERE rank = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| B           | sushi        |

---
**Query #7**

    With before_member_purchase AS (
    SELECT *,
    RANK () OVER(PARTITION BY customer_id ORDER BY order_date DESC) AS rank
    FROM sales
    INNER JOIN menu USING(product_id)
    INNER JOIN members USING(customer_id)
      WHERE order_date < join_date
     ORDER BY customer_id, order_date
      )
      
     SELECT customer_id, product_name
     FROM before_member_purchase
     WHERE rank = 1;

| customer_id | product_name |
| ----------- | ------------ |
| A           | sushi        |
| A           | curry        |
| B           | sushi        |

---
**Query #8**

    SELECT customer_id, sum(price) AS total_spent_before_membership
    FROM sales
    INNER JOIN menu using(product_id)
    INNER JOIN members using(customer_id)
      WHERE order_date < join_date
      GROUP BY customer_id
     ORDER BY customer_id;

| customer_id | total_spent_before_membership |
| ----------- | ----------------------------- |
| A           | 25                            |
| B           | 40                            |

---
**Query #9**

    WITH customer_points AS
    (
      SELECT *,
      	CASE
      		WHEN product_id = 1 THEN price * 20
      		ELSE price * 10
      	END AS points
      FROM menu
      )
      SELECT customer_id, sum(points)
      FROM customer_points
      INNER JOIN sales
      USING(product_id)
     GROUP BY customer_id
     ORDER BY customer_id;

| customer_id | sum |
| ----------- | --- |
| A           | 860 |
| B           | 940 |
| C           | 360 |

---
**Query #10**

    WITH dates AS 
    (
      SELECT *, 
      join_date + INTERVAL '6 DAY' AS valid_date, 
      DATE_TRUNC('month', '2021-01-31'::DATE) + INTERVAL '1 MONTH - 1 DAY' AS last_date
    FROM members
    
    ) 
    SELECT Customer_id, 
           SUM(
    	   CASE 
    	  WHEN product_ID = 1 THEN price *20
          WHEN order_date between join_date and valid_date Then price *2 * 10
    	  ELSE price * 10
    	  END 
    	  ) as Points
    FROM Dates
    JOIN Sales USING(customer_id)
    JOIN Menu USING(product_id)
    WHERE order_date < last_date
    GROUP BY customer_id;

| customer_id | points |
| ----------- | ------ |
| A           | 1370   |
| B           | 820    |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/138)